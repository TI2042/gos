
============= матрица смежности ===============
public class AdjacencyMatrixGraph
    {
        public static void MainG()
        {
            int[,] mas = { { 0, 1, 1, 0, 0, 0, 1 }, // матрица смежности
            { 1, 0, 1, 1, 0, 0, 0 },
            { 1, 1, 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 1, 0, 0 },
            { 0, 0, 0, 1, 0, 1, 0 },
            { 0, 0, 0, 0, 1, 0, 1 },
            { 1, 0, 0, 0, 0, 1, 0 } };

            int[] temp = new int[mas.GetLength(0)];
            for (int i = 1; i < mas.GetLength(1) + 1; i++)
            {
                temp[i - 1] = 0;
            }
            temp[0] = 1;

            Console.Write("FindDepth - ");
            FindDepth(1, mas, temp);
            Console.WriteLine();



            for (int i = 1; i < mas.GetLength(1) + 1; i++)
            {
                temp[i - 1] = 0;
            }



            Console.Write("FindDepth v2 - ");
            FindDepthv2(1, mas, temp);
            Console.WriteLine();

            
            Console.Write("FindWidth - ");
            FindWidth(mas);
            Console.WriteLine();

            return;
        }

        public static void FindDepth(int start, int[,] mas, int[] alreadyUsed)
        {
            Console.Write(start.ToString());
            for (int i = 1; i < mas.GetLength(1) + 1; i++)
            {
                if ((mas[start - 1, i - 1] == 1))
                {
                    if (alreadyUsed[i - 1] != 1)
                    {
                        alreadyUsed[i - 1] = 1;
                        FindDepth(i, mas, alreadyUsed);
                    }
                }
            }
            return;
        }

        public static void FindDepthv2(int start, int[,] mas, int[] alreadyUsed)
        {
            alreadyUsed[start - 1] = 1;
            Console.Write(start.ToString());
            for (int i = 1; i < mas.GetLength(1) + 1; i++)
            {
                if ((mas[start - 1, i - 1] == 1))
                {
                    if (alreadyUsed[i - 1] != 1)
                    {
                        FindDepthv2(i, mas, alreadyUsed);
                    }
                }
            }
            return;
        }

        public static void FindWidth(int[,] mas)
        {
            List<int> quaue = new List<int>();
            quaue.Add(1);
            int i = 0;
            while (quaue.Count!=mas.GetLength(0))
            {
                for (int j = 1; j < mas.GetLength(1) + 1; j++)
                {
                    if (mas[quaue[i]-1, j - 1] == 1)
                    {
                        if (quaue.Contains(j)) { }
                        else quaue.Add(j);
                    }
                }

                if (i < quaue.Count) i++;
            }

            foreach (int q in quaue) { Console.Write(q.ToString()); }
        }
    }
   
   ============= Список смежности ===============
    public class AdjacencyListGraph
    {
        public static void MainG()
        {
            int[][] W = new int[5][];
            W[0] = new int[3] { 2, 3, 4};
            W[1] = new int[3] { 1, 4, 5};
            W[2] = new int[2] { 1, 4};
            W[3] = new int[4] { 1, 2, 3, 5};
            W[4] = new int[2] { 2, 4};

            int[,] array = new int[5, 5];
            for (int i = 0; i < W.Length; i++)
            {
                for (int j=0; j < W.Length; j++)
                {
                    array[i, j] = 0;
                }
                foreach (int j in W[i])
                {
                    array[i, j-1] = 1;
                }
            }

            for (int i = 0; i < W.Length; i++)
            {
                for (int j = 0; j < W.Length; j++)
                {
                    Console.Write(array[i, j].ToString() + ", ");
                }
                Console.WriteLine();
            }
            return;
        }
    }
    
    
