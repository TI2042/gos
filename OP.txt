#include <iostream>
using namespace std;
//node declaration for doubly linked list
struct Node {
	int data;
	struct Node* prev, * next;
};



Node* newNode(int val)
{
	Node* temp = new Node;
	temp->data = val;
	temp->prev = temp->next = nullptr;
	return temp;
}
void displayList(Node* head)
{
	while (head->next != nullptr) {
		cout << head->data << " <==> ";
		head = head->next;
	}
	cout << head->data << endl;
}

// Insert a new node at the head of the list
void push_head(Node** head, int node_data)
{
	Node* temp = newNode(node_data);
	temp->next = *head;
	(*head)->prev = temp;
	(*head) = temp;
}
void push_back(Node** head, int node_data)
{
	Node* temp = newNode(node_data);
	Node* tmp = (*head);
	while (tmp->next != NULL)
	{
		tmp = tmp->next;
	}
	temp->prev = tmp;
	tmp->next = temp;
}

void push_center(Node** list, int data, int len)
{
	Node* newElement = newNode(data);

	Node* tmp = *list;
	int count = 0;

	while (count < len / 2 - 1 && tmp->next != 0) {
		tmp = tmp->next;
		count++;
	}

	newElement->next = tmp->next;
	tmp->next = newElement;
}

int GetSize(Node** list) {
	Node* tmp = *list;
	int count = 1;
	while (tmp->next != 0) {
		tmp = tmp->next;
		count++;
	}
	return count;
}

int main()
{
	Node* headNode = newNode(5);
	push_head(&headNode, 4);
	push_head(&headNode, 3);
	push_head(&headNode, 2);
	push_head(&headNode, 1);
	push_back(&headNode, 6);
	push_center(&headNode, 10,GetSize(&headNode));
	push_center(&headNode, 15, GetSize(&headNode));
	push_center(&headNode, 17, GetSize(&headNode));
	push_center(&headNode, 155, GetSize(&headNode));
	cout << "Original doubly linked list: " << endl;
	displayList(headNode);


	return 0;
}



===TicketExample.cpp===
#include "TicketExample.h"
#include <string>
#include <iostream>
using namespace std;

/// <summary>
/// Кароче, ебать структура с данными по билету
/// </summary>
struct RegistrationForm
{
	int SerialNumber;
	string Firm;
	string Model;
	string Serial;
	int year;
};
//Это наша Нода, ебать, узел, если ты русский
struct NodeTwoExample :RegistrationForm
{
	//Это значение ноды
	RegistrationForm val;
	//Указатель на следующую ноду
	NodeTwoExample* next;
	//Указатель на предыдущую
	NodeTwoExample* previos;
	//Я в ахуе, но это конструктор, в который будут совать свои грязные данные н'вахи(другие структуры или кому там это надо)
	NodeTwoExample(RegistrationForm _val) : val(_val), next(nullptr), previos(nullptr) {}
};
//Структура самого двусвязного списка
struct TwoListExample
{
	//Это у нас первый парень на вписке
	NodeTwoExample* first;
	//Это у нас последний парень на вписке
	NodeTwoExample* last;
	//Тоже конструктор, ага
	TwoListExample() : first(nullptr), last(nullptr) {}
	//Проверка на то, пустой ли список или нет
	bool is_empty() {
		return first == nullptr;
	}
	//Вставка в конец вписки
	void push_back(RegistrationForm _val)
	{
		//Создаём новую ноду
		NodeTwoExample* p = new NodeTwoExample(_val);
		//Если список пустой, не ебёмся, просто вставляем
		if (is_empty()) {
			first = p;
			last = p;
			p->previos = nullptr;
			p->next = nullptr;
			return;
		}
		//Ставим у старого последнего следующим новый
		last->next = p;
		//У нового предыдущего старый
		p->previos = last;
		//Говорим всем, что последний ЛОХ!ПИДОР!
		last = p;
	}
	//печатаем чо у нас в списке
	void print() {
		//Если пусто, то ничего не печатаем
		if (is_empty()) return;
		//Ставим во главу пересчёта первого на вписке
		NodeTwoExample* p = first;
		//Циклим, выписываем, чо там было в стракте
		while (p) { // p != nullptr
			cout << "SerialNumber: " << p->val.SerialNumber << " ";
			cout << "Firm: " << p->val.Firm << " ";
			cout << "Model: " << p->val.Model << " ";
			cout << "Serial: " << p->val.Serial << " ";
			cout << "year: " << p->val.year << endl;
			p = p->next;
		}
		cout << endl;
	}
	//Возвращаем длину списка
	int length()
	{
		//Первый во главе угла опять
		NodeTwoExample* p = first;
		int count = 0;
		//Если пусто, то пусто, похуй, я не тестил
		if (is_empty())
		{
			return count;
		}
		//Пока-пока-покачивая считаем сколько
		while (p != nullptr)
		{
			count++;
			p = p->next;
		}
		return count;
	}
	//А вот и вставочка в середину
	void insert_middle(RegistrationForm _val)
	{
		//Если пусто, то просто вставляем
		if (is_empty())
		{
			push_back(_val);
			return;
		}
		//Снова во главе угла первый чел, видимо самый позитивный
		NodeTwoExample* pTemp = first;
		//Узнаём, где там середина
		int count = length() / 2;
		//Двигаемся в середину
		for (int i = 0; i < count; i++)
		{
			pTemp = pTemp->next;
		}
		//Создаём ноду
		NodeTwoExample* p = new NodeTwoExample(_val);
		//Указываем что у нового предыдущий тот же что и у старого
		p->previos = pTemp->previos;
		//У старого предыдущий новый
		pTemp->previos->next = p;
		//У нового следующий старый
		p->next = pTemp;
		//У старого предыдущий это новый
		pTemp->previos = p;

		/// <summary>
		/// Сортировка списка по серийнуму номеру после вставки в середину
		/// Меняем только данные не трогая связи ячеек
		/// </summary>
		/// <param name="_val"></param>
		//Берем 2 ячейки
		//Первую
		NodeTwoExample* p1 = first;
		//Вторую
		NodeTwoExample* p2 = p1->next;
		//Сортируем список по SerialNumber
		for (int i = 0;i < length()-1; i++) {
			//Получаем из первой структуры номер
			int ser1 = p1->val.SerialNumber;
			//Получаем из второй структуры номер
			int ser2 = p2->val.SerialNumber;
			//сравниваем
			if (ser1 > ser2) {
				//меняем местами данные но не ячейки
				RegistrationForm tmp = p1->val;
				RegistrationForm tmp2 = p2->val;
				p1->val = tmp2;
				p2->val = tmp;

			}
			//Переходим к следующим ячейкам
			p1 = p1->next;
			p2 = p2->next;
		}
	}
};

=====main====


#include <iostream>
#include "TicketExample.cpp"

int main()
{
    std::cout << "Hello World!\n";
        setlocale(LC_ALL, "rus");
        RegistrationForm form;
        form.SerialNumber = 123;
        form.Firm = "Фирма";
        form.Model = "Модель";
        form.Serial = "Сериал";
        form.year = 2000;
        TwoListExample list;
        list.push_back(form);
        list.push_back(form);
        list.push_back(form);
        list.push_back(form);
        list.push_back(form);
        cout << "SerialNumber: " << list.length() << " ";
        form.SerialNumber = 1;
        list.insert_middle(form);
        form.SerialNumber = 2;
        list.insert_middle(form);
        form.SerialNumber = 3;
        list.insert_middle(form);
        list.print();
        return 0;
}
